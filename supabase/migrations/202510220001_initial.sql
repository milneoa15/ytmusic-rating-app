-- Initial schema for migrating from browser localStorage to Supabase
-- Generated by Codex assistant on behalf of project maintainers

-- Enable required extensions
create extension if not exists "pgcrypto";

-- Users table stores canonical app users keyed by internal UUID
create table if not exists public.users (
  id uuid primary key default gen_random_uuid(),
  auth_uid uuid,
  youtube_channel_id text unique,
  display_name text,
  email text,
  youtube_refresh_token text,
  token_expires_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists users_auth_uid_idx on public.users (auth_uid);
create index if not exists users_youtube_channel_idx on public.users (youtube_channel_id);

-- Songs table stores canonical song metadata shared across users
create table if not exists public.songs (
  id text primary key,
  youtube_song_id text,
  title text not null,
  artist text,
  album text,
  duration_seconds integer,
  duration_text text,
  thumbnail_url text,
  metadata jsonb default '{}',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists songs_youtube_song_idx on public.songs (youtube_song_id);

-- Junction table for song ownership / ratings per user
create table if not exists public.user_songs (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references public.users (id) on delete cascade,
  song_id text not null references public.songs (id) on delete cascade,
  rating integer check (rating between 1 and 10),
  rated_at timestamptz,
  imported_at timestamptz default now(),
  metadata jsonb default '{}',
  constraint user_songs_unique_user_song unique (user_id, song_id)
);

create index if not exists user_songs_user_idx on public.user_songs (user_id);
create index if not exists user_songs_song_idx on public.user_songs (song_id);

-- Themes created by a user
create table if not exists public.themes (
  id text primary key,
  user_id uuid not null references public.users (id) on delete cascade,
  name text not null,
  color text,
  description text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint themes_user_name_unique unique (user_id, name)
);

create index if not exists themes_user_idx on public.themes (user_id);

-- Map songs to themes for each user
create table if not exists public.song_themes (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references public.users (id) on delete cascade,
  song_id text not null references public.songs (id) on delete cascade,
  theme_id text not null references public.themes (id) on delete cascade,
  created_at timestamptz not null default now(),
  constraint song_themes_unique unique (user_id, song_id, theme_id)
);

create index if not exists song_themes_user_idx on public.song_themes (user_id);
create index if not exists song_themes_song_idx on public.song_themes (song_id);
create index if not exists song_themes_theme_idx on public.song_themes (theme_id);

-- User playlists
create table if not exists public.playlists (
  id text primary key,
  user_id uuid not null references public.users (id) on delete cascade,
  name text not null,
  description text,
  filters jsonb default '{}',
  starred boolean default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint playlists_user_name_unique unique (user_id, name)
);

create index if not exists playlists_user_idx on public.playlists (user_id);
create index if not exists playlists_starred_idx on public.playlists (user_id, starred);

-- Songs inside playlists
create table if not exists public.playlist_songs (
  id uuid primary key default gen_random_uuid(),
  playlist_id text not null references public.playlists (id) on delete cascade,
  song_id text not null references public.songs (id) on delete cascade,
  user_id uuid not null references public.users (id) on delete cascade,
  position integer,
  added_at timestamptz not null default now(),
  constraint playlist_songs_unique unique (playlist_id, song_id),
  constraint playlist_songs_position_positive check (position is null or position >= 0)
);

create index if not exists playlist_songs_playlist_idx on public.playlist_songs (playlist_id);
create index if not exists playlist_songs_user_idx on public.playlist_songs (user_id);

-- Enable RLS and add default policies
alter table public.users enable row level security;
alter table public.songs enable row level security;
alter table public.user_songs enable row level security;
alter table public.themes enable row level security;
alter table public.song_themes enable row level security;
alter table public.playlists enable row level security;
alter table public.playlist_songs enable row level security;

-- Users can only see/update their own user row (by auth.uid or channel id)
create policy users_owner_select on public.users
  for select using (
    auth.uid() is not null
    and (auth.uid() = auth_uid or auth.uid() = id)
  );

create policy users_owner_update on public.users
  for update using (
    auth.uid() is not null
    and (auth.uid() = auth_uid or auth.uid() = id)
  );

-- Songs are global read, but only service role can mutate
create policy songs_read_all on public.songs
  for select using (true);

create policy songs_no_public_write on public.songs
  for insert with check (false);
create policy songs_no_public_update on public.songs
  for update using (false);
create policy songs_no_public_delete on public.songs
  for delete using (false);

-- Per-user policies for user-owned tables
create policy user_songs_owner_policy on public.user_songs
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy themes_owner_policy on public.themes
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy song_themes_owner_policy on public.song_themes
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy playlists_owner_policy on public.playlists
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy playlist_songs_owner_policy on public.playlist_songs
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Trigger to keep updated_at in sync
create or replace function public.touch_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger touch_users_updated_at
  before update on public.users
  for each row
  execute function public.touch_updated_at();

create trigger touch_songs_updated_at
  before update on public.songs
  for each row
  execute function public.touch_updated_at();

create trigger touch_themes_updated_at
  before update on public.themes
  for each row
  execute function public.touch_updated_at();

create trigger touch_playlists_updated_at
  before update on public.playlists
  for each row
  execute function public.touch_updated_at();
